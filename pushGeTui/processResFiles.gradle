// 过滤删除 com.getui:gtsdk:3.3.12.0
// <meta-data android:name="GETUI_APPID" android:value="${GETUI_APPID}" />

class XmlBean {
    String filePath
    String fileName
    List<XmlTagBean> tags


    XmlBean(String filePath, String fileName) {
        this.filePath = filePath
        this.fileName = fileName
        this.tags = new ArrayList<>()
    }

    XmlBean(String filePath, String fileName, String tagName, String tagNameValue) {
        this(filePath, fileName)
        this.addXmlTag(tagName, tagNameValue)
    }

    def addXmlTag(String tagName, String tagNameValue) {
        this.tags.add(new XmlTagBean(tagName, tagNameValue))
    }


    def execute(Project project) {
        def file = new File(filePath, fileName)
        println "removeXmlTag ===> ${file.getAbsolutePath()} ${tags}"

        if (tags.isEmpty()) {
            project.logger.log(LogLevel.WARN, "${file.getAbsolutePath()}, 不需要处理")
            return
        }

        if (!file.exists()) {
            project.logger.log(LogLevel.ERROR, "${file.getAbsolutePath()}, 不存在")
            return
        }
        def removeFlag = false
        def parser = new XmlParser()
        def root = parser.parse(file)
        def nodeList = root.depthFirst()
        for (xmlTagBean in tags) {

            Node find = findNode(nodeList, xmlTagBean)

            if (find == null) {
                println "removeXmlTag ===> ${xmlTagBean} 未找到"
            } else {
//                Node parent = find.parent()
//                if (find == root) {
//                    //应该等价 parent == null
//                }
                removeFlag = true
                find.parent().remove(find)
                println "removeXmlTag ===> ${xmlTagBean} 剔除成功"
            }
        }
        if (!removeFlag) {
            project.logger.log(LogLevel.WARN, "${file.getAbsolutePath()} ${tags} , 未命中")
            return
        }
        // 将修改后的 Xml 节点输出到目录中
        new XmlNodePrinter(new PrintWriter(file)).print(root)
        // 后续优化？加上校验
        println "removeXmlTag ===> 剔除并且写入成功"
    }

    def findNode(List nodeList, XmlTagBean xmlTagBean) {
        for (item in nodeList) {
            Node node = (Node) item
//            println "${node.name()} --- ${node.attributes().toString()}"
            if (node.name() == xmlTagBean.tagName) {
                Map map = node.attributes()
                if (map.containsValue(xmlTagBean.tagNameValue)) {
                    return node
                }
            }
        }
        return null
    }
}

class XmlTagBean {
    String tagName
    String tagNameValue

    XmlTagBean(String tagName, String tagNameValue) {
        this.tagName = tagName
        this.tagNameValue = tagNameValue
    }

    @Override
    String toString() {
        return "(${tagName} - ${tagNameValue})"
    }
}

def buildValuesXmlList(String buildType) {
    def xmlList = new ArrayList<XmlBean>()
    def parentPath = "${project.buildDir.getAbsolutePath()}/intermediates/exploded-aar"
    def valueFileName = "values.xml"
    def stringTagName = "string"

    //Resource and asset merger
    ///com.huawei.hms/push/6.5.0.300/debug/res/values/values.xml"
    ///com.huawei.hms/opendevice/6.3.0.305/debug/res/values/values.xml
    XmlBean huaweiPushValueXmlBean = new XmlBean("${parentPath}/com.huawei.hms/opendevice/6.3.0.305/${buildType}/res/values/", valueFileName)
    huaweiPushValueXmlBean.addXmlTag(stringTagName,"push_cat_body") //99A9343CEC0A64112FD2496EF752F719
    huaweiPushValueXmlBean.addXmlTag(stringTagName,"push_cat_head") //767499AE5B2DFC9D873AF46032E13B00

    XmlBean getuiValueXmlBean = new XmlBean("${parentPath}/com.getui/gtsdk/${GTSDK_VERSION}/${buildType}/res/values/", valueFileName, stringTagName, "app_name")
    XmlBean meizuValueXmlBean = new XmlBean("${parentPath}/com.getui.opt/mzp/${MULTI_ITEM_VERSION.MEIZU}/${buildType}/res/values/", valueFileName, stringTagName, "app_name")
    XmlBean xiaomiValueXmlBean = new XmlBean("${parentPath}/com.getui.opt/xmp/${MULTI_ITEM_VERSION.XIAOMI}/${buildType}/res/values/", valueFileName, stringTagName, "app_name")
    XmlBean upsValueXmlBean = new XmlBean("${parentPath}/com.getui.opt/ups/${MULTI_ITEM_VERSION.UPS}/${buildType}/res/values/", valueFileName, stringTagName, "app_name")
    xmlList.add(getuiValueXmlBean)
    if (MULTI_ITEM_ENABLED.HUAWEI) xmlList.add(huaweiPushValueXmlBean)
    if (MULTI_ITEM_ENABLED.MEIZU) xmlList.add(meizuValueXmlBean)
    if (MULTI_ITEM_ENABLED.XIAOMI) xmlList.add(xiaomiValueXmlBean)
    if (MULTI_ITEM_ENABLED.UPS) xmlList.add(upsValueXmlBean)

    return xmlList
}

def buildManifestXmlList(String buildType) {
    def xmlList = new ArrayList<XmlBean>()
    def parentPath = "${project.buildDir.getAbsolutePath()}/intermediates/exploded-aar"
    def manifestFileName = "AndroidManifest.xml"
    def metaTagName = "meta-data"

    XmlBean gtsdkXmlBean = new XmlBean("${parentPath}/com.getui/gtsdk/${GTSDK_VERSION}/${buildType}", manifestFileName, metaTagName, "GETUI_APPID")

    XmlBean oppoXmlBean = new XmlBean("${parentPath}/com.assist-v3/oppo/${MULTI_ITEM_VERSION.OPPO}/${buildType}", manifestFileName)
    oppoXmlBean.addXmlTag(metaTagName, "OPPOPUSH_APPKEY")
    oppoXmlBean.addXmlTag(metaTagName, "OPPOPUSH_APPSECRET")

    XmlBean vivoXmlBean = new XmlBean("${parentPath}/com.assist-v3/vivo/${MULTI_ITEM_VERSION.VIVO}/${buildType}", manifestFileName)
    vivoXmlBean.addXmlTag(metaTagName, "api_key")
    vivoXmlBean.addXmlTag(metaTagName, "app_id")

    XmlBean huaweiXmlBean = new XmlBean("${parentPath}/com.getui.opt/hwp/${MULTI_ITEM_VERSION.HUAWEI}/${buildType}",
            manifestFileName, metaTagName, "com.huawei.hms.client.appid")

    XmlBean meizuXmlBean = new XmlBean("${parentPath}/com.getui.opt/mzp/${MULTI_ITEM_VERSION.MEIZU}/${buildType}", manifestFileName)
    meizuXmlBean.addXmlTag(metaTagName, "MEIZUPUSH_APPID")
    meizuXmlBean.addXmlTag(metaTagName, "MEIZUPUSH_APPKEY")

    XmlBean xiaomiXmlBean = new XmlBean("${parentPath}/com.getui.opt/xmp/${MULTI_ITEM_VERSION.XIAOMI}/${buildType}/", manifestFileName)
    xiaomiXmlBean.addXmlTag(metaTagName, "MIPUSH_APPID")
    xiaomiXmlBean.addXmlTag(metaTagName, "MIPUSH_APPKEY")


    XmlBean honorXmlBean = new XmlBean("${parentPath}/com.getui.opt/honor/${MULTI_ITEM_VERSION.HONOR}/${buildType}/", manifestFileName)
    honorXmlBean.addXmlTag(metaTagName, "com.hihonor.push.app_id")

    xmlList.add(gtsdkXmlBean)
    if (MULTI_ITEM_ENABLED.OPPO) xmlList.add(oppoXmlBean)
    if (MULTI_ITEM_ENABLED.VIVO) xmlList.add(vivoXmlBean)
    if (MULTI_ITEM_ENABLED.HUAWEI) xmlList.add(huaweiXmlBean)
    if (MULTI_ITEM_ENABLED.MEIZU) xmlList.add(meizuXmlBean)
    if (MULTI_ITEM_ENABLED.XIAOMI) xmlList.add(xiaomiXmlBean)
    if (MULTI_ITEM_ENABLED.HONOR) xmlList.add(honorXmlBean)

    return xmlList
}

def processByBuildType(String buildType) {
    String path = "${project.buildDir.getAbsolutePath()}/intermediates/exploded-aar"
    File file = new File(path)
    println "${file.getAbsolutePath()} exists : ${file.exists()}"
    if (file.exists()) {
        String[] files = file.list()
        if (files == null || files.length == 0) println "[]" else println files

        buildValuesXmlList(buildType).each { it.execute(project) }
        buildManifestXmlList(buildType).each { it.execute(project) }
    }
}

project.afterEvaluate {
//    project.tasks.matching { task->
//        task.name == "processDebugManifest" || task.name == "processReleaseManifest"
//    }.each {task->
//        task.doFirst {
//            println "${task.name} --> doFirst"
//        }
//    }
    project.tasks.getByName("packageDebugResources").doFirst {
        processByBuildType("debug")
    }

    project.tasks.getByName("packageReleaseResources").doFirst {
        processByBuildType("release")
    }
}


//project.afterEvaluate {
//    println "=======>project.afterEvaluate"
//    android.getLibraryVariants().all { variant ->
//        variant.outputs.each() {
//            String path = "${project.buildDir.getAbsolutePath()}/intermediates/exploded-aar"
//            File file = new File(path)
//            println "${file.getAbsolutePath()} exists : ${file.exists()}"
////            if (file.exists()) {
////                String[] files = file.list()
////
////                if (files == null || files.length == 0) println "[]" else println files
////                println variant.buildType.name
////
////                buildValuesXmlList(it.name).each { it.execute(project) }
////                buildManifestXmlList(it.name).each { it.execute(project) }
////            }
//        }
//    }
//}


//android.getLibraryVariants().all { variant ->
//    variant.outputs.each() {
//        println "===> ${it}"
//        it.processResources.doFirst { task->
//            println "=====> processResources"
//        }
////        it.packageDebugResources.doFirst { task ->
////            println "removeXmlTag ===> packageDebugResources.doFirst buildType-${it.name} $task"
////            buildValuesXmlList(it.name).each {it.execute()}
////        }
////
////        it.packageReleaseResources.doFirst { task ->
////            println "removeXmlTag ===> packageReleaseResources.doFirst buildType-${it.name} $task"
////            buildValuesXmlList(it.name).each {it.execute()}
////        }
//
//        it.processManifest.doFirst { task ->
//            println "removeXmlTag ===> processManifest.doFirst buildType-${it.name}"
////            println task.name
////            println project.buildDir.getAbsolutePath()
////            def gtsdkManifestPath = "intermediates/exploded-aar/com.getui/gtsdk/${GTSDK_VERSION}"
////            def manifestPath = "${project.buildDir.getAbsolutePath()}/${gtsdkManifestPath}/${it.name}"
////            removeXmlTag(manifestPath, "AndroidManifest.xml", "meta-data", "GETUI_APPID")
//
//            buildManifestXmlList(it.name).each { it.execute() }
//        }
//    }
//}
