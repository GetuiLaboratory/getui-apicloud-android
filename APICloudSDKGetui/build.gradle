apply plugin: 'com.android.application'


android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    defaultConfig {
        applicationId "com.getui.apiclouddemo"
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        javaMaxHeapSize "5g"  //内存小可以适当改小
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.properties'
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            resources {
                srcDir 'res'
            }
            res {
                srcDir 'res'
            }
            assets {
                srcDir 'assets'
            }
            java {
                srcDir 'src'
                srcDir "$buildDir/generated/getui"
            }
            jniLibs {
                srcDir 'libs'
            }
        }
    }

    lintOptions {
        abortOnError false
    }

}
/**
 * wanghaobo modify
 */

buildscript {
    repositories {
        mavenCentral() // or jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/GetuiSDK4.3.0.3.jar')
}








// 以下为 APICloud 插件压缩包的自动打包模块

ext {
    jarName = "APICloudGetui"
    jarPath = "com/getui/sdk"
    modulePath = "$buildDir/pushGeTui"
    moduleResPath = "$modulePath/res_pushGeTui"
    moduleSourcePath = "$modulePath/source"
    moduleTatgetPath = "$modulePath/target"
    moduleJsonPath = "$modulePath/module.json"
    sdkPath = 'libs/GetuiSDK4.3.0.3.jar'
    generatPath = "$buildDir/generated/getui"
}




// 归档模块相关的 class文件, 生成用于APICloud插件的Jar包
task releaseJar(type: Jar) {
    baseName "APICloudGetui"
    def sourceDir = "${getProject().buildDir}/intermediates/classes/release/"
    // 控制台打印提示信息
    println "Now Generate the Jar from $sourceDir"
    from sourceDir

    // 排除一部分class文件
    exclude {
        it.path.startsWith('com/getui/apiclouddemo')
    }
}



// 清空旧版本的插件包
task cleanApicloud(type: Delete) {
    delete modulePath
}



// 打包apicloud模块文件夹为zip文件
task releaseApicloud(type: Zip) {
    entryCompression = ZipEntryCompression.STORED
    destinationDir = buildDir
    archiveName = "pushGeTui.zip"
    from "$buildDir/pushGeTui"
}



// 通过命令行指令, 压缩文件夹
task zipApicloud(type: Exec) {
    workingDir 'build'
    commandLine 'zip', '-r', "pushGeTui.zip", "pushGeTui/"  // 命令行的zip指令
}




// 创建文件目录和写入配置文件
task generateApicloudFiles {
    // 创建模块存放目录
    mkdir "$buildDir/pushGeTui"
    // 定义 module.json文件内容
    def jsonModuleStr = """{
  name: 'pushGeTui',
  class: 'com.getui.sdk.GetuiSDK'
}
"""
    file(moduleJsonPath).write(jsonModuleStr)  // 写入文件
}



// 暂未使用
// 创建一个类来保存编译信息
task generateBuildconfig {
    def buildConfig =
            """package com.getui.sdk;
                public final class BuildConfig {
                public static final String ModuleName = "pushGeTui";
            }
            """
    def configPath = "$generatPath/com/getui/sdk"
    mkdir configPath
    file("$configPath/BuildConfig.java").write(buildConfig)
}




// 复制AndroidManifest.xml, 从旧版本中原封不动的复制, 需要先进行手动修改
task copyManifest(type: Copy) {
    from '../pushGetui/res_pushGetui/AndroidManifest.xml'
    into "$modulePath/res_pushGeTui"
}


// 复制res文件, 从本工程的 res/layout/ 目录中原样拷贝
task copyRes(type: Copy) {
    from 'res/layout/getui_notification.xml'
    into "$modulePath/res_pushGeTui/res/layout/"
}


// 复制 APICloud 个推插件中间层的Java文件生成的jar包, 以及 GetuiSDK2.10.2.0.apicloud jar包
task copySource(type: Copy) {
    from 'build/libs/'
    from 'libs/GetuiSDK4.3.0.3.jar'
    into moduleSourcePath
}


// 复制so文件到 target 文件夹中
task copyTarget(type: Copy) {
    from 'libs/armeabi/libgetuiext2.so'
    into moduleTatgetPath
}





// 最终生成 APICloud的安卓插件压缩包
task apicloudRelease {}




// 配置各个函数之间的依赖关系
releaseJar.dependsOn build
copyRes.dependsOn generateApicloudFiles
copySource.dependsOn releaseJar
releaseApicloud.dependsOn copyRes, copySource, copyManifest, copyTarget
zipApicloud.dependsOn copyRes, copySource, copyManifest, copyTarget
apicloudRelease.dependsOn releaseApicloud



