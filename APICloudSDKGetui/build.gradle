apply plugin: 'com.android.application'


android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    defaultConfig {
        applicationId "com.getui.apiclouddemo"
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        javaMaxHeapSize "5g"  //内存小可以适当改小
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.properties'
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            resources {
                srcDir 'res'
            }
            res {
                srcDir 'res'
            }
            assets {
                srcDir 'assets'
            }
            java {
                srcDir 'src'
                srcDir "$buildDir/generated/getui"
            }
            jniLibs {
                srcDir 'libs'
            }
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}



ext {
    jarName = "APICloudGetui"
    jarPath = "com/getui/sdk"
    modulePath = "$buildDir/$ApicloudModuleName"
    moduleResPath = "$modulePath/res_$ApicloudModuleName"
    moduleSourcePath = "$modulePath/source"
    moduleTatgetPath = "$modulePath/target"
    moduleJsonPath = "$modulePath/module.json"
    sdkPath = 'libs/GetuiSDK2.9.3.0.apicloud.jar'
    generatPath = "$buildDir/generated/getui"
}

//归档模块相关的 class文件, 生成Jar包
task releaseJar(type: Jar) {
    baseName jarName
    def fromDir = "${getProject().buildDir}/intermediates/classes/release/"
    println "jar from $fromDir"
    from fromDir

    exclude { //排除一部分class文件
        it.path.startsWith('com/getui/apiclouddemo')
    }
}

task cleanApicloud(type: Delete) {
    delete modulePath
}

//打包apicloud模块文件夹为zip文件
task releaseApicloud(type: Zip) {
    entryCompression = ZipEntryCompression.STORED
    destinationDir = buildDir
    Calendar now = Calendar.getInstance()
//    archiveName = "$ApicloudModuleName-$PushGetuiVersion-${now.get(Calendar.YEAR)}${now.get(Calendar.MONTH)}${now.get(Calendar.DAY_OF_MONTH)}.zip"
    archiveName = "${ApicloudModuleName}.zip"
    from modulePath
}

//通过命令打包模块
task zipApicloud(type: Exec) {
    workingDir 'build'
    commandLine 'zip', '-r', "${ApicloudModuleName}.zip", "${ApicloudModuleName}/"
}

//创建文件目录和配置文件
task generateApicloudFiles {
    mkdir modulePath  //创建模块存放目录
    //定义 module.json文件内容
    def jsonModuleStr = """{
  name: '$ApicloudModuleName',
  class: 'com.getui.sdk.GetuiSDK'
}
"""
    file(moduleJsonPath).write(jsonModuleStr)  //写入文件
}

//创建一个类来保存编译信息
task generateBuildconfig {
    def buildConfig =
            """package com.getui.sdk;
public final class BuildConfig {
  public static final String ModuleName = "$ApicloudModuleName";
}
"""
    def configPath = "$generatPath/com/getui/sdk"
    mkdir configPath
    file("$configPath/BuildConfig.java").write(buildConfig)
}

//复制AndroidManifest.xml
task copyManifest(type: Copy) {
    from '../pushGetui/res_pushGetui/AndroidManifest.xml'
//    from 'AndroidManifest.xml'
    into moduleResPath
}

//复制res文件
task copyRes(type: Copy) {
    from 'res/layout/getui_notification.xml'
    into "$moduleResPath/res/layout/"
}

//复制 source文件
task copySource(type: Copy) {
    from "$buildDir/libs/"
    from sdkPath
    into moduleSourcePath
}

//复制 target文件
task copyTarget(type: Copy) {
    from 'libs/armeabi/libgetuiext2.so'
    into moduleTatgetPath
}

//最终生成 apicloud格式的安卓模块
task apicloudRelease {}


releaseJar.dependsOn build
copyRes.dependsOn generateApicloudFiles
copySource.dependsOn releaseJar
releaseApicloud.dependsOn copyRes, copySource, copyManifest, copyTarget
zipApicloud.dependsOn copyRes, copySource, copyManifest, copyTarget
apicloudRelease.dependsOn releaseApicloud

